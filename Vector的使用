#include<iostream>   
#include<vector>   
using namespace std;   
typedef vector<int> INTVECTOR;//自定义类型INTVECTOR   
//测试vector容器的功能  
int  main()   
{   
//vec1对象初始为空  
INTVECTOR vec1;   
//vec2对象最初有10个值为6的元素  
INTVECTOR vec2(10,6);   
//vec3对象最初有3个值为6的元素，拷贝构造  
INTVECTOR vec3(vec2.begin(),vec2.begin()+3);   
//声明一个名为i的双向迭代器  
INTVECTOR::iterator i;   
//从前向后显示vec1中的数据  
cout<<"vec1.begin()--vec1.end():"<<endl;  
for (i=vec1.begin(); i !=vec1.end(); ++i)   
cout<< *i << " ";   //因为i=vec1.begin（）是容器的起始地址，所以用*i来获取其内容 
cout<< endl;   
//从前向后显示vec2中的数据  
cout<<"vec2.begin()--vec2.end():"<<endl;  
for (i=vec2.begin(); i !=vec2.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   
//从前向后显示vec3中的数据  
cout<<"vec3.begin()--vec3.end():"<<endl;  
for (i=vec3.begin(); i !=vec3.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   


/*vec3.insert(vec3.begin()+2,5);
cout<<"vec3.begin()--vec3.end():"<<endl;  
for (i=vec3.begin(); i !=vec3.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   */

//测试添加和插入成员函数，vector不支持从前插入  
vec1.push_back(2);//从后面添加一个成员  
vec1.push_back(4);  
vec1.insert(vec1.begin()+1,5);//在vec1第一个的位置上插入成员5，其实是在第一个元素的后面插入，并不是在其前面插入 
//从vec1第一的位置开始插入vec3的所有成员  
vec1.insert(vec1.begin()+1,vec3.begin(),vec3.end());  //相当于整个vec3的顺序不变，直接复制到vec1的相应位置中 
cout<<"afterpush() and insert() now the vec1 is:" <<endl;   
for (i=vec1.begin(); i !=vec1.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   
//测试赋值成员函数  
vec2.assign(8,1);// 重新给vec2赋值，8个成员的初始值都为1   
cout<<"vec2.assign(8,1):"<<endl;   
for (i=vec2.begin(); i !=vec2.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   
//测试引用类函数  
cout<<"vec1.front()="<<vec1.front()<<endl;//vec1第零个成员  
cout<<"vec1.back()="<<vec1.back()<<endl;//vec1的最后一个成员  
cout<<"vec1.at(4)="<<vec1. at(4)<<endl;//vec1的第五个成员  
cout<<"vec1[4]="<<vec1[4]<<endl;  //同样是第五个成员 
//测试移出和删除  
vec1.pop_back();//将最后一个成员移出vec1     
vec1.erase(vec1.begin()+1,vec1.end()-2);//删除成员  此处表示，begin前面留下一个，删除到end前的两个 
cout<<"vec1.pop_back()and vec1.erase():" <<endl;   
for (i=vec1.begin(); i !=vec1.end(); ++i)   
cout<< *i << " ";   
cout<< endl;   
//显示序列的状态信息  
cout<<"vec1.size():"<<vec1.size()<<endl;//打印成员个数  
cout<<"vec1.empty():"<<vec1.empty()<<endl;//判断vec1是否为空，空则返回1，不空返回0   
 return 0;
}   


/*问题：
1.vector如何使创造的容器里面的内容并不是唯一的数（不借助插入和复制等手段）
2.如何一次性插入多个数，而不利用复制和拷贝
3.如何利用vector排序
4. 
